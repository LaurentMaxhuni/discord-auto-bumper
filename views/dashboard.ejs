<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Discord Bump Dashboard</title>
  <link rel="stylesheet" href="/style.css">
</head>
<body>
  <header>
    <h1>Discord Bump Dashboard</h1>
    <div class="user">Logged in as <strong><%= user.username %></strong> | <a href="/logout">Logout</a></div>
  </header>

  <main>
    <section class="card">
      <div class="card-heading">
        <div>
          <h2>Servers</h2>
          <p class="muted">Select a server to adjust scheduling and trigger bumps instantly.</p>
        </div>
      </div>
      <div id="guilds" class="grid"></div>
    </section>

    <section class="card" id="config-section" hidden>
      <div class="card-heading">
        <div>
          <h2 id="guildTitle">Configure</h2>
          <p class="muted">Fine tune automation, then launch the partner bot's /bump right from here.</p>
        </div>
        <button id="bumpBtn" class="accent" disabled>Trigger /bump</button>
      </div>
      <div class="field-grid">
        <label>Channel
          <select id="channels"></select>
        </label>
        <label>Interval (minutes)
          <input id="interval" type="number" min="1" value="120">
        </label>
        <label>Message
          <input id="message" type="text" maxlength="2000" value="Bumped! ðŸš€">
        </label>
      </div>
      <div class="row">
        <button id="saveBtn">Save Schedule</button>
        <button id="removeBtn" class="danger">Remove Schedule</button>
      </div>
      <div id="status" class="status"></div>
    </section>
  </main>

  <script>
    const guildsEl = document.getElementById('guilds');
    const configSection = document.getElementById('config-section');
    const guildTitle = document.getElementById('guildTitle');
    const channelsEl = document.getElementById('channels');
    const intervalEl = document.getElementById('interval');
    const messageEl = document.getElementById('message');
    const saveBtn = document.getElementById('saveBtn');
    const removeBtn = document.getElementById('removeBtn');
    const bumpBtn = document.getElementById('bumpBtn');
    const statusEl = document.getElementById('status');
    let selectedGuild = null;
    let selectedConfig = null;

    function renderStatus(variant, title, description = '') {
      statusEl.innerHTML = `
        <div class="embed embed--${variant}">
          <div class="embed-title">${title}</div>
          ${description ? `<div class="embed-desc">${description}</div>` : ''}
        </div>
      `;
    }

    function clearStatus() {
      statusEl.innerHTML = '';
    }

    async function loadGuilds() {
      const r = await fetch('/api/guilds');
      const data = await r.json();
      guildsEl.innerHTML = '';
      data.guilds.forEach(g => {
        const div = document.createElement('div');
        div.className = 'guild';
        const title = document.createElement('span');
        title.textContent = g.name || g.id;
        div.appendChild(title);

        if (g.hasBot) {
          div.title = 'Configure this server';
          div.onclick = () => selectGuild(g, data.config[g.id]);
        } else {
          const btn = document.createElement('a');
          btn.textContent = 'Invite Bot';
          btn.href = g.inviteUrl || ('/invite?guild_id=' + encodeURIComponent(g.id));
          btn.target = '_blank';
          btn.rel = 'noopener';
          btn.className = 'accent';
          btn.style.marginTop = '8px';
          div.appendChild(btn);
          div.style.opacity = '0.85';
          div.style.cursor = 'default';
        }

        guildsEl.appendChild(div);
      });
    }

    async function selectGuild(g, cfg) {
      selectedGuild = g;
      selectedConfig = cfg || null;
      guildTitle.textContent = 'Configure: ' + (g.name || g.id);
      configSection.hidden = false;
      clearStatus();

      const rc = await fetch('/api/channels?guild_id=' + g.id);
      const data = await rc.json();
      channelsEl.innerHTML = '';
      data.channels.forEach(ch => {
        const opt = document.createElement('option');
        opt.value = ch.id;
        opt.textContent = ch.name;
        channelsEl.appendChild(opt);
      });

      if (cfg) {
        channelsEl.value = cfg.channelId;
        intervalEl.value = cfg.intervalMinutes || 120;
        messageEl.value = cfg.message || 'Bumped! ðŸš€';
      }

      // Enable manual trigger for the selected channel even if not saved
      bumpBtn.disabled = channelsEl.options.length === 0;
    }

    saveBtn.onclick = async () => {
      if (!selectedGuild) return;
      const body = {
        guildId: selectedGuild.id,
        channelId: channelsEl.value,
        intervalMinutes: Number(intervalEl.value) || 120,
        message: messageEl.value
      };
      renderStatus('info', 'Saving configurationâ€¦', 'Updating your automatic bump schedule.');
      const r = await fetch('/api/save', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(body) });
      const data = await r.json();
      if (data.ok) {
        selectedConfig = data.config;
        renderStatus('success', 'Schedule saved!', 'Your bump schedule is active and will use the external /bump command.');
        bumpBtn.disabled = false;
      } else {
        renderStatus('error', 'Save failed', data.error || 'Please try again.');
      }
    };

    removeBtn.onclick = async () => {
      if (!selectedGuild) return;
      renderStatus('info', 'Removing scheduleâ€¦');
      const r = await fetch('/api/remove', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ guildId: selectedGuild.id }) });
      const data = await r.json();
      if (data.ok) {
        selectedConfig = null;
        bumpBtn.disabled = channelsEl.options.length === 0;
        renderStatus('success', 'Schedule removed', 'Automation is turned off for this server.');
      } else {
        renderStatus('error', 'Removal failed', data.error || 'Please try again.');
      }
    };

    bumpBtn.onclick = async () => {
      if (!selectedGuild) return;
      renderStatus('info', 'Triggering bumpâ€¦', 'We are relaying the /bump command to the partner bot.');
      try {
        const r = await fetch('/api/bump', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ guildId: selectedGuild.id, channelId: channelsEl.value })
        });
        const data = await r.json();
        if (data.ok) {
          renderStatus('success', 'Bump command executed successfully!');
        } else if (data.cooldown) {
          const embed = data.embed || {};
          renderStatus('warning', embed.title || 'Cooldown in effect', embed.description || 'The partner bot reported a cooldown.');
        } else {
          const embed = data.embed || {};
          renderStatus('error', embed.title || 'Bump command failed', embed.description || 'Please check the bot permissions and try again.');
        }
      } catch (err) {
        console.error(err);
        renderStatus('error', 'Unexpected error', 'Something went wrong while calling /bump.');
      }
    };

    loadGuilds();
  </script>
</body>
</html>
